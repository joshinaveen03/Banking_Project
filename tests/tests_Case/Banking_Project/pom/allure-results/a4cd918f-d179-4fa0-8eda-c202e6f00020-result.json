{"name": "test_banking_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression  a[normalize - space() = 'New Customer'] because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string ' a[normalize - space() = 'New Customer']' is not a valid XPath expression.\"}\n  (Session info: chrome=130.0.6723.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF72DC83AF5+28005]\n\t(No symbol) [0x00007FF72DBE83F0]\n\t(No symbol) [0x00007FF72DA8580A]\n\t(No symbol) [0x00007FF72DA8C2CC]\n\t(No symbol) [0x00007FF72DA8E5E7]\n\t(No symbol) [0x00007FF72DA8E6A0]\n\t(No symbol) [0x00007FF72DAD54EA]\n\t(No symbol) [0x00007FF72DAD5D2C]\n\t(No symbol) [0x00007FF72DB1EA97]\n\t(No symbol) [0x00007FF72DAFBA7F]\n\t(No symbol) [0x00007FF72DB1B8B3]\n\t(No symbol) [0x00007FF72DAFB7E3]\n\t(No symbol) [0x00007FF72DAC75C8]\n\t(No symbol) [0x00007FF72DAC8731]\n\tGetHandleVerifier [0x00007FF72DF7646D+3118813]\n\tGetHandleVerifier [0x00007FF72DFC6CC0+3448624]\n\tGetHandleVerifier [0x00007FF72DFBCF3D+3408301]\n\tGetHandleVerifier [0x00007FF72DD4A44B+841403]\n\t(No symbol) [0x00007FF72DBF344F]\n\t(No symbol) [0x00007FF72DBEF4C4]\n\t(No symbol) [0x00007FF72DBEF65D]\n\t(No symbol) [0x00007FF72DBDEBB9]\n\tBaseThreadInitThunk [0x00007FFC817C7374+20]\n\tRtlUserThreadStart [0x00007FFC8281CC91+33]", "trace": "self = <tests.tests_Case.Banking_Project.pom.test_banking_pom.TestLogin object at 0x0000021F32145940>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a07b7cd248d3423541c5eb33f7a70c0\")>\n\n    @allure.epic(\"Banking Login Test\")\n    @allure.feature(\"TC#1 - Banking Positive Test\")\n    @pytest.mark.usefixtures(\"setup\")\n    def test_banking_positive(self,setup):\n        driver = setup\n        LoginPage = loginPage(driver)\n        LoginPage.login_to_banking(user=self.username, pwd=self.password)\n        time.sleep(2)\n        # Verify\n    \n        dashboard_page = DashBoardPage(driver)\n    \n        # Verify the homepage text to confirm successful login\n        homepage_text = dashboard_page.get_homepage_text()\n        assert homepage_text == \"Welcome To Manager's Page of Guru99 Bank\"\n    \n        time.sleep(2)\n    \n        # Click on 'New Customer' in the Dashboard\n>       dashboard_page.new_customer_click()\n\ntest_banking_pom.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\pageObjects\\dashboardPage.py:29: in new_customer_click\n    self.new_Customer().click()\n..\\..\\..\\pageObjects\\dashboardPage.py:21: in new_Customer\n    return self.driver.find_element(*DashBoardPage.new_customer)\n..\\..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F321F7FB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...07FF72DBDEBB9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC817C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC8281CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression  a[normalize - space() = 'New Customer'] because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string ' a[normalize - space() = 'New Customer']' is not a valid XPath expression.\"}\nE         (Session info: chrome=130.0.6723.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72DC83AF5+28005]\nE       \t(No symbol) [0x00007FF72DBE83F0]\nE       \t(No symbol) [0x00007FF72DA8580A]\nE       \t(No symbol) [0x00007FF72DA8C2CC]\nE       \t(No symbol) [0x00007FF72DA8E5E7]\nE       \t(No symbol) [0x00007FF72DA8E6A0]\nE       \t(No symbol) [0x00007FF72DAD54EA]\nE       \t(No symbol) [0x00007FF72DAD5D2C]\nE       \t(No symbol) [0x00007FF72DB1EA97]\nE       \t(No symbol) [0x00007FF72DAFBA7F]\nE       \t(No symbol) [0x00007FF72DB1B8B3]\nE       \t(No symbol) [0x00007FF72DAFB7E3]\nE       \t(No symbol) [0x00007FF72DAC75C8]\nE       \t(No symbol) [0x00007FF72DAC8731]\nE       \tGetHandleVerifier [0x00007FF72DF7646D+3118813]\nE       \tGetHandleVerifier [0x00007FF72DFC6CC0+3448624]\nE       \tGetHandleVerifier [0x00007FF72DFBCF3D+3408301]\nE       \tGetHandleVerifier [0x00007FF72DD4A44B+841403]\nE       \t(No symbol) [0x00007FF72DBF344F]\nE       \t(No symbol) [0x00007FF72DBEF4C4]\nE       \t(No symbol) [0x00007FF72DBEF65D]\nE       \t(No symbol) [0x00007FF72DBDEBB9]\nE       \tBaseThreadInitThunk [0x00007FFC817C7374+20]\nE       \tRtlUserThreadStart [0x00007FFC8281CC91+33]\n\n..\\..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "start": 1730464910230, "stop": 1730464919655, "uuid": "0c7077b1-4903-4a6e-8755-e264360dcc05", "historyId": "5213c626c8c7512cc62d4253d3932443", "testCaseId": "5213c626c8c7512cc62d4253d3932443", "fullName": "tests.tests_Case.Banking_Project.pom.test_banking_pom.TestLogin#test_banking_positive", "labels": [{"name": "epic", "value": "Banking Login Test"}, {"name": "feature", "value": "TC#1 - Banking Positive Test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.tests_Case.Banking_Project.pom"}, {"name": "suite", "value": "test_banking_pom"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-NPC46QP"}, {"name": "thread", "value": "24212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests_Case.Banking_Project.pom.test_banking_pom"}]}
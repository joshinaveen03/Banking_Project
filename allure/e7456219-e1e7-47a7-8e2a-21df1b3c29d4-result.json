{"name": "test_banking", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=130.0.6723.70); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF610CA3AB5+28005]\n\t(No symbol) [0x00007FF610C083B0]\n\t(No symbol) [0x00007FF610AA580A]\n\t(No symbol) [0x00007FF610AB7D0B]\n\t(No symbol) [0x00007FF610AACF04]\n\t(No symbol) [0x00007FF610AAAE09]\n\t(No symbol) [0x00007FF610AAE5E7]\n\t(No symbol) [0x00007FF610AAE6A0]\n\t(No symbol) [0x00007FF610AF7B4B]\n\t(No symbol) [0x00007FF610AE97D6]\n\t(No symbol) [0x00007FF610B1BA3A]\n\t(No symbol) [0x00007FF610AE9246]\n\t(No symbol) [0x00007FF610B1BC50]\n\t(No symbol) [0x00007FF610B3B8B3]\n\t(No symbol) [0x00007FF610B1B7E3]\n\t(No symbol) [0x00007FF610AE75C8]\n\t(No symbol) [0x00007FF610AE8731]\n\tGetHandleVerifier [0x00007FF610F9643D+3118829]\n\tGetHandleVerifier [0x00007FF610FE6C90+3448640]\n\tGetHandleVerifier [0x00007FF610FDCF0D+3408317]\n\tGetHandleVerifier [0x00007FF610D6A40B+841403]\n\t(No symbol) [0x00007FF610C1340F]\n\t(No symbol) [0x00007FF610C0F484]\n\t(No symbol) [0x00007FF610C0F61D]\n\t(No symbol) [0x00007FF610BFEB79]\n\tBaseThreadInitThunk [0x00007FFC817C7374+20]\n\tRtlUserThreadStart [0x00007FFC8281CC91+33]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1601197f493cffcfb40f1f8696f80099\")>\n\n    @allure.epic(\"Banking Login Test\")\n    @allure.feature(\"TC#1 - Banking Positive Test\")\n    def test_banking(setup):\n        driver=setup\n        LoginPage=loginPage(driver)\n>       LoginPage.login_to_banking(user=\"mngr595791\",pwd=\"YsUpamy\")\n\ntests\\tests_Case\\Banking_Project\\test_bankinglogin.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\pageObjects\\loginPage.py:38: in login_to_banking\n    self.get_submit().click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BB57FFCCB0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF610BFEB79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC817C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC8281CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=130.0.6723.70); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF610CA3AB5+28005]\nE       \t(No symbol) [0x00007FF610C083B0]\nE       \t(No symbol) [0x00007FF610AA580A]\nE       \t(No symbol) [0x00007FF610AB7D0B]\nE       \t(No symbol) [0x00007FF610AACF04]\nE       \t(No symbol) [0x00007FF610AAAE09]\nE       \t(No symbol) [0x00007FF610AAE5E7]\nE       \t(No symbol) [0x00007FF610AAE6A0]\nE       \t(No symbol) [0x00007FF610AF7B4B]\nE       \t(No symbol) [0x00007FF610AE97D6]\nE       \t(No symbol) [0x00007FF610B1BA3A]\nE       \t(No symbol) [0x00007FF610AE9246]\nE       \t(No symbol) [0x00007FF610B1BC50]\nE       \t(No symbol) [0x00007FF610B3B8B3]\nE       \t(No symbol) [0x00007FF610B1B7E3]\nE       \t(No symbol) [0x00007FF610AE75C8]\nE       \t(No symbol) [0x00007FF610AE8731]\nE       \tGetHandleVerifier [0x00007FF610F9643D+3118829]\nE       \tGetHandleVerifier [0x00007FF610FE6C90+3448640]\nE       \tGetHandleVerifier [0x00007FF610FDCF0D+3408317]\nE       \tGetHandleVerifier [0x00007FF610D6A40B+841403]\nE       \t(No symbol) [0x00007FF610C1340F]\nE       \t(No symbol) [0x00007FF610C0F484]\nE       \t(No symbol) [0x00007FF610C0F61D]\nE       \t(No symbol) [0x00007FF610BFEB79]\nE       \tBaseThreadInitThunk [0x00007FFC817C7374+20]\nE       \tRtlUserThreadStart [0x00007FFC8281CC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "460fbeb2-7b50-4e4f-8730-9d82781f15c3-attachment.txt", "type": "text/plain"}], "start": 1730040759154, "stop": 1730040766546, "uuid": "b2ea9054-27e2-4716-88ee-7eb679a0dd90", "historyId": "c9b72d9c0d63b48d95d12e7617cc8872", "testCaseId": "c9b72d9c0d63b48d95d12e7617cc8872", "fullName": "tests.tests_Case.Banking_Project.test_bankinglogin#test_banking", "labels": [{"name": "feature", "value": "TC#1 - Banking Positive Test"}, {"name": "epic", "value": "Banking Login Test"}, {"name": "parentSuite", "value": "tests.tests_Case.Banking_Project"}, {"name": "suite", "value": "test_bankinglogin"}, {"name": "host", "value": "DESKTOP-NPC46QP"}, {"name": "thread", "value": "15204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests_Case.Banking_Project.test_bankinglogin"}]}
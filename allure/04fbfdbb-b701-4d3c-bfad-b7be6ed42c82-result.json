{"name": "test_Banking_positive[user_cred1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: User or Password is not valid\nMessage: unexpected alert open: {Alert text : User or Password is not valid}\n  (Session info: chrome=130.0.6723.58)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6521FE1F5+2972373]\n\t(No symbol) [0x00007FF651E955F0]\n\t(No symbol) [0x00007FF651D357FA]\n\t(No symbol) [0x00007FF651DCC494]\n\t(No symbol) [0x00007FF651DAB823]\n\t(No symbol) [0x00007FF651D775E8]\n\t(No symbol) [0x00007FF651D78751]\n\tGetHandleVerifier [0x00007FF6522247BD+3129501]\n\tGetHandleVerifier [0x00007FF652274D00+3458528]\n\tGetHandleVerifier [0x00007FF65226B05D+3418429]\n\tGetHandleVerifier [0x00007FF651FF687B+844123]\n\t(No symbol) [0x00007FF651EA0AFF]\n\t(No symbol) [0x00007FF651E9C6D4]\n\t(No symbol) [0x00007FF651E9C86D]\n\t(No symbol) [0x00007FF651E8BD79]\n\tBaseThreadInitThunk [0x00007FFF6EB07374+20]\n\tRtlUserThreadStart [0x00007FFF6FEFCC91+33]", "trace": "user_cred = {'password': 'admin13', 'username': 'admin'}\n\n    @pytest.mark.parametrize(\"user_cred\", read_credential_from_excel(\"/Users/joshi/PycharmProjects/Personal_Projects/Banking_Project/Data_Driven_Test/testdata_ddt.xlsx\"))\n    def test_Banking_positive(user_cred):\n        username=user_cred[\"username\"]\n        password=user_cred[\"password\"]\n>       Banking(username,password)\n\nData_Driven_Test\\test_ddt_better.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nData_Driven_Test\\test_ddt_better.py:43: in Banking\n    result=driver.current_url\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022561787920>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"User or Password is not valid\"},\"error\":\"unexpected alert open\",\"m...07FF651E8BD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF6EB07374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF6FEFCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: User or Password is not valid\nE           Message: unexpected alert open: {Alert text : User or Password is not valid}\nE             (Session info: chrome=130.0.6723.58)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF6521FE1F5+2972373]\nE           \t(No symbol) [0x00007FF651E955F0]\nE           \t(No symbol) [0x00007FF651D357FA]\nE           \t(No symbol) [0x00007FF651DCC494]\nE           \t(No symbol) [0x00007FF651DAB823]\nE           \t(No symbol) [0x00007FF651D775E8]\nE           \t(No symbol) [0x00007FF651D78751]\nE           \tGetHandleVerifier [0x00007FF6522247BD+3129501]\nE           \tGetHandleVerifier [0x00007FF652274D00+3458528]\nE           \tGetHandleVerifier [0x00007FF65226B05D+3418429]\nE           \tGetHandleVerifier [0x00007FF651FF687B+844123]\nE           \t(No symbol) [0x00007FF651EA0AFF]\nE           \t(No symbol) [0x00007FF651E9C6D4]\nE           \t(No symbol) [0x00007FF651E9C86D]\nE           \t(No symbol) [0x00007FF651E8BD79]\nE           \tBaseThreadInitThunk [0x00007FFF6EB07374+20]\nE           \tRtlUserThreadStart [0x00007FFF6FEFCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "parameters": [{"name": "user_cred", "value": "{'username': 'admin', 'password': 'admin13'}"}], "start": 1729416695781, "stop": 1729416714486, "uuid": "04c1e0a9-0908-4fd3-b1fc-52d3c7131743", "historyId": "fb89955938b8d949f524a66f772ceea5", "testCaseId": "d6ad9dfc04c285cd497984f48512de22", "fullName": "Data_Driven_Test.test_ddt_better#test_Banking_positive", "labels": [{"name": "parentSuite", "value": "Data_Driven_Test"}, {"name": "suite", "value": "test_ddt_better"}, {"name": "host", "value": "DESKTOP-NPC46QP"}, {"name": "thread", "value": "49384-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Data_Driven_Test.test_ddt_better"}]}